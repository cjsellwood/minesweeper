{"version":3,"sources":["store/actions/actionTypes.js","store/helpers/boardGeneration.js","store/actions/minesweeper.js","components/DifficultyForm.js","components/Gameboard.js","components/EndScreen.js","App.js","store/helpers/copyBoard.js","store/helpers/clearAdjacent.js","store/reducers/minesweeper.js","index.js"],"names":["STORE_DIFFICULTY","START_GAME","FLAG_SQUARE","CLEAR_SQUARE","RESTART_GAME","SUBMIT_SCORE","SAVE_FETCHED_SCORES","flattenArray","array","reduce","acc","cur","startGame","difficulty","board","size","i","row","j","push","clear","mine","flag","adjacent","generateBoard","length","x","y","calculateAdjacent","mines","filter","square","Math","floor","random","column","populateMines","type","actionTypes","saveFetchedScores","scores","submitScore","name","connect","state","minesweeper","dispatch","storeDifficulty","actions","props","handleChange","e","target","value","onSubmit","preventDefault","id","defaultChecked","onChange","htmlFor","gameOver","winner","time","winTime","flagSquare","col","clearSquare","useState","timeDisplay","setTimeDisplay","timer","setInterval","Date","now","useEffect","clearInterval","className","map","onContextMenu","handleRightClick","onClick","handleClick","isFetched","restartGame","postScore","worstScore","fetch","method","body","JSON","stringify","then","response","json","data","console","log","fetchScores","catch","error","setWorstScore","setName","score","handleSubmit","copyBoard","boardCopy","checkSurrounds","clearAdjacent","initialState","Easy","Medium","Hard","action","newScores","sort","a","b","slice","reducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0dadc6f.chunk.js","sourcesContent":["export const STORE_DIFFICULTY = \"STORE_DIFFICULTY\";\nexport const START_GAME = \"START_GAME\";\nexport const FLAG_SQUARE = \"FLAG_SQUARE\";\nexport const CLEAR_SQUARE = \"CLEAR_SQUARE\";\nexport const RESTART_GAME = \"RESTART_GAME\";\nexport const SUBMIT_SCORE = \"SUBMIT_SCORE\";\nexport const FETCH_SCORES = \"FETCH_SCORES\";\nexport const SAVE_FETCHED_SCORES = \"SAVE_FETCHED_SCORES\";\n","// Generate empty board\nexport const generateBoard = (difficulty) => {\n  let size;\n  switch (difficulty) {\n    case \"Easy\":\n      size = 10;\n      break;\n    case \"Medium\":\n      size = 20;\n      break;\n    case \"Hard\":\n      size = 30;\n      break;\n    default:\n      break;\n  }\n\n  let array = [];\n  for (let i = 0; i < size; i++) {\n    let row = [];\n    for (let j = 0; j < size; j++) {\n      row.push({\n        clear: false,\n        mine: false,\n        flag: false,\n        adjacent: 0,\n      });\n    }\n    array.push(row);\n  }\n\n  return array;\n};\n\n// Turn 2 dimensional array into 1 dimensional array\nexport const flattenArray = (array) => {\n  return array.reduce((acc, cur) => {\n    return [...acc, ...cur];\n  }, []);\n};\n\n// Add mines to board\nexport const populateMines = (difficulty, board) => {\n  let mines;\n  switch (difficulty) {\n    case \"Easy\":\n      mines = 15;\n      break;\n    case \"Medium\":\n      mines = 60;\n      break;\n    case \"Hard\":\n      mines = 135;\n      break;\n    default:\n      break;\n  }\n\n  // Randomly insert mines until desired amount added\n  while (\n    flattenArray(board).filter((square) => square.mine === true).length < mines\n  ) {\n    const row = Math.floor(Math.random() * board.length);\n    const column = Math.floor(Math.random() * board.length);\n    board[row][column].mine = true;\n  }\n\n  return board;\n};\n\n// Calculate the adjacent mines to each square\nexport const calculateAdjacent = (board) => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      // Continue if square is a mine\n      if (board[i][j].mine) {\n        continue;\n      }\n      // For each square check the 8 squares surrounding it\n      for (let x = i - 1; x <= i + 1; x++) {\n        for (let y = j - 1; y <= j + 1; y++) {\n          // Continue if square is outside boundary\n          if (x <= -1 || x >= board.length || y <= -1 || y >= board[i].length) {\n            continue;\n          }\n          if (board[x][y].mine) {\n            board[i][j].adjacent = board[i][j].adjacent + 1;\n          }\n        }\n      }\n    }\n  }\n  return board;\n};","import * as actionTypes from \"./actionTypes\";\nimport {\n  generateBoard,\n  populateMines,\n  calculateAdjacent,\n} from \"../helpers/boardGeneration\";\n\nexport const storeDifficulty = (difficulty) => {\n  return {\n    type: actionTypes.STORE_DIFFICULTY,\n    difficulty,\n  };\n};\n\nexport const startGame = (difficulty) => {\n  let board = generateBoard(difficulty);\n  board = populateMines(difficulty, board);\n  board = calculateAdjacent(board);\n\n  return {\n    type: actionTypes.START_GAME,\n    startGame: true,\n    board,\n  };\n};\n\nexport const flagSquare = (row, col) => {\n  return {\n    type: actionTypes.FLAG_SQUARE,\n    row,\n    col,\n  };\n};\n\nexport const clearSquare = (row, col) => {\n  return {\n    type: actionTypes.CLEAR_SQUARE,\n    row,\n    col,\n  };\n};\n\nexport const restartGame = () => {\n  return {\n    type: actionTypes.RESTART_GAME,\n  };\n};\n\nexport const fetchScores = () => {\n  return (dispatch) => {\n    return fetch(\n      \"https://minesweeper-237c5-default-rtdb.firebaseio.com/scores.json\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(saveFetchedScores(data));\n      })\n      .catch((error) => {});\n  };\n};\n\nexport const saveFetchedScores = (scores) => {\n  return {\n    type: actionTypes.SAVE_FETCHED_SCORES,\n    scores,\n  };\n};\n\nexport const postScore = (name, winTime, difficulty) => {\n  return (dispatch) => {\n    fetch(\n      `https://minesweeper-237c5-default-rtdb.firebaseio.com/scores/${difficulty}.json`,\n      {\n        method: \"PATCH\",\n        body: JSON.stringify({\n          [name]: winTime,\n        }),\n      }\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        dispatch(submitScore(name));\n      });\n  };\n};\n\nexport const submitScore = (name) => {\n  return {\n    type: actionTypes.SUBMIT_SCORE,\n    name,\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../store/actions/index\";\n\nexport const DifficultyForm = (props) => {\n  const handleChange = (e) => {\n    props.storeDifficulty(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    props.startGame(props.difficulty);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Choose Difficulty</h2>\n      <div>\n        <input\n          type=\"radio\"\n          name=\"difficulty\"\n          id=\"Easy\"\n          value=\"Easy\"\n          defaultChecked={props.difficulty === \"Easy\"}\n          onChange={handleChange}\n          data-testid=\"easy-difficulty\"\n        />\n        <label htmlFor=\"Easy\">Easy</label>\n        <input\n          type=\"radio\"\n          name=\"difficulty\"\n          id=\"Medium\"\n          value=\"Medium\"\n          defaultChecked={props.difficulty === \"Medium\"}\n          onChange={handleChange}\n          data-testid=\"medium-difficulty\"\n        />\n        <label htmlFor=\"Medium\">Medium</label>\n        <input\n          type=\"radio\"\n          name=\"difficulty\"\n          id=\"Hard\"\n          value=\"Hard\"\n          defaultChecked={props.difficulty === \"Hard\"}\n          onChange={handleChange}\n        />\n        <label htmlFor=\"Hard\">Hard</label>\n        <div>\n          <button type=\"submit\">Start</button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    difficulty: state.minesweeper.difficulty,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    storeDifficulty: (difficulty) => {\n      dispatch(actions.storeDifficulty(difficulty));\n    },\n    startGame: (difficulty) => {\n      dispatch(actions.startGame(difficulty));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DifficultyForm);\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../store/actions/index\";\n\nexport const Gameboard = (props) => {\n  const handleRightClick = (e, row, col) => {\n    e.preventDefault();\n    props.flagSquare(row, col);\n  };\n\n  const handleClick = (row, col) => {\n    if (props.gameOver) {\n      return;\n    }\n    props.clearSquare(row, col);\n  };\n\n  // Add id for testing cypress win condition clicking all non mines\n  let cypressId = null;\n  if (process.env.NODE_ENV === \"development\") {\n    cypressId = \"no-mine\";\n  }\n\n  const [timeDisplay, setTimeDisplay] = useState(0);\n\n  const timer = setInterval(() => {\n    return setTimeDisplay(Math.floor((Date.now() - props.time) / 1000));\n  }, 1000);\n\n  useEffect(() => {\n    return () => {\n      setTimeDisplay(0);\n      clearInterval(timer);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"Gameboard\">\n      <p className=\"timer\">{!props.gameOver ? timeDisplay : props.winTime}</p>\n      <div>\n        {props.board.map((row, i) => {\n          return (\n            <div key={i} className=\"row\">\n              {row.map((square, j) => {\n                return (\n                  <div\n                    key={`${i}-${j}`}\n                    data-row={i}\n                    data-column={j}\n                    data-testid=\"square\"\n                    data-cypress={square.mine ? null : cypressId}\n                    className=\"square\"\n                    onContextMenu={(e) => handleRightClick(e, i, j)}\n                    onClick={() => handleClick(i, j)}\n                  >\n                    {square.mine && props.gameOver && !props.winner ? (\n                      <p className=\"mine\">💣</p>\n                    ) : null}\n                    {square.adjacent > 0 && square.clear ? (\n                      <p>{square.adjacent}</p>\n                    ) : null}\n                    {square.flag ||\n                    (props.gameOver && props.winner && square.mine) ? (\n                      <div className=\"flag\">\n                        <p>🏁</p>\n                      </div>\n                    ) : null}\n                    {!square.clear ? (\n                      <p\n                        className={\n                          !props.gameOver ? \"unclear\" : \"unclear-no-hover\"\n                        }\n                      ></p>\n                    ) : null}\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    board: state.minesweeper.board,\n    gameOver: state.minesweeper.gameOver,\n    winner: state.minesweeper.winner,\n    time: state.minesweeper.time,\n    winTime: state.minesweeper.winTime,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    flagSquare: (row, column) => {\n      dispatch(actions.flagSquare(row, column));\n    },\n    clearSquare: (row, column) => {\n      dispatch(actions.clearSquare(row, column));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gameboard);\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../store/actions/index\";\n\nexport const EndScreen = (props) => {\n  const [worstScore, setWorstScore] = useState(9999999);\n\n  useEffect(() => {\n    // Fetch high scores on first load\n    if (!props.isFetched) {\n      props.fetchScores();\n    }\n\n    // Calculate worst score on scoreboard to beat\n    if (props.scores[props.difficulty].length < 10) {\n      setWorstScore(9999999);\n    } else {\n      setWorstScore(props.scores[props.difficulty][9]);\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  const [name, setName] = useState(\"\");\n  const handleChange = (e) => {\n    setName(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Only submit if will be on scoreboard\n    if (props.winTime < worstScore) {\n      props.postScore(name, props.winTime, props.difficulty);\n    }\n  };\n  return (\n    <div className=\"EndScreen\">\n      {props.winner ? <h1>You Win</h1> : <h1>You Lose</h1>}\n      {props.winner ? (\n        <h2 className=\"win-time\">Time: {props.winTime}s</h2>\n      ) : null}\n\n      {props.isFetched ? (\n        <div>\n          <div>\n            <h2>Easy</h2>\n            <ol>\n              {props.scores[\"Easy\"].map((score, i) => {\n                return (\n                  <li key={\"Easy-\" + i}>\n                    <p>{score.name}</p> <p>{score.score}</p>\n                  </li>\n                );\n              })}\n            </ol>\n          </div>\n          <div>\n            <h2>Medium</h2>\n            <ol>\n              {props.scores[\"Medium\"].map((score, i) => {\n                return (\n                  <li key={\"Medium-\" + i}>\n                    <p>{score.name}</p> <p>{score.score}</p>\n                  </li>\n                );\n              })}\n            </ol>\n          </div>\n          <div>\n            <h2>Hard</h2>\n            <ol>\n              {props.scores[\"Hard\"].map((score, i) => {\n                return (\n                  <li key={\"Hard-\" + i}>\n                    <p>{score.name}</p> <p>{score.score}</p>\n                  </li>\n                );\n              })}\n            </ol>\n          </div>\n        </div>\n      ) : null}\n\n      {props.winner && props.winTime < worstScore ? (\n        <form onSubmit={(e) => handleSubmit(e)}>\n          <label htmlFor=\"name\">Enter Name</label>\n          <input id=\"name\" type=\"text\" value={name} onChange={handleChange} />\n          <button type=\"submit\" aria-label=\"submit score\">\n            Submit Score\n          </button>\n        </form>\n      ) : null}\n      <button\n        className=\"restart-button\"\n        onClick={props.restartGame}\n        aria-label=\"restart game\"\n      >\n        Restart\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    gameOver: state.minesweeper.gameOver,\n    winner: state.minesweeper.winner,\n    winTime: state.minesweeper.winTime,\n    scores: state.minesweeper.scores,\n    isFetched: state.minesweeper.isFetched,\n    difficulty: state.minesweeper.difficulty,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    restartGame: () => {\n      dispatch(actions.restartGame());\n    },\n    postScore: (name, winTime, difficulty, worstScore) => {\n      dispatch(actions.postScore(name, winTime, difficulty, worstScore));\n    },\n    fetchScores: () => {\n      dispatch(actions.fetchScores());\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EndScreen);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport DifficultyForm from \"./components/DifficultyForm\";\nimport Gameboard from \"./components/Gameboard\";\nimport EndScreen from \"./components/EndScreen\";\nimport \"./reset.css\";\nimport \"./App.css\";\n\nconst App = (props) => {\n  return (\n    <div className=\"App\">\n      {props.startGame ? null : (\n        <div>\n          <h1>Minesweeper</h1>\n          <div>\n            <p>Left click a square to mark a clear space</p>\n            <p>Right click a square to flag a mine</p>\n          </div>\n          <DifficultyForm />\n        </div>\n      )}\n      {props.startGame ? <Gameboard /> : null}\n      {props.gameOver ? <EndScreen /> : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    startGame: state.minesweeper.startGame,\n    gameOver: state.minesweeper.gameOver,\n  };\n};\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const copyBoard = (board) => {\n  let boardCopy = [];\n  for (let i = 0; i < board.length; i++) {\n    const row = [];\n    for (let j = 0; j < board[i].length; j++) {\n      row.push({\n        ...board[i][j],\n      });\n    }\n    boardCopy.push(row);\n  }\n  return boardCopy;\n};\n\nexport default copyBoard;\n","// Check 8 surrounding tiles for non cleared recursively\nexport const checkSurrounds = (board, row, col) => {\n  for (let i = row - 1; i <= row + 1; i++) {\n    for (let j = col - 1; j <= col + 1; j++) {\n      // Continue if square is outside boundary\n      if (i <= -1 || i >= board.length || j <= -1 || j >= board[i].length) {\n        continue;\n      }\n      if (!board[i][j].clear) {\n        // If not a mine mark clear\n        board[i][j].clear = true;\n        if (board[i][j].adjacent === 0) {\n          // Check 8 surrounding tiles of tile with no adjacent mines\n          checkSurrounds(board, i, j);\n        }\n      }\n    }\n  }\n};\n\n// Clear all connected spots with 0 adjacent mines\nconst clearAdjacent = (board, row, col) => {\n  checkSurrounds(board, row, col);\n  return board;\n};\n\nexport default clearAdjacent;\n","import * as actionTypes from \"../actions/actionTypes\";\nimport copyBoard from \"../helpers/copyBoard\";\nimport clearAdjacent from \"../helpers/clearAdjacent\";\nimport { flattenArray } from \"../helpers/boardGeneration\";\n\nconst initialState = {\n  difficulty: \"Easy\",\n  startGame: false,\n  board: [],\n  gameOver: false,\n  winner: false,\n  time: 0,\n  winTime: null,\n  scores: {\n    Easy: [],\n    Medium: [],\n    Hard: [],\n  },\n  isFetched: false,\n};\n\nconst storeDifficulty = (state, action) => {\n  return {\n    ...state,\n    difficulty: action.difficulty,\n  };\n};\n\nconst startGame = (state, action) => {\n  return {\n    ...state,\n    startGame: action.startGame,\n    board: action.board,\n    time: Date.now(),\n  };\n};\n\nconst flagSquare = (state, action) => {\n  // Duplicate board immutably\n  let boardCopy = copyBoard(state.board);\n\n  // Only change flag if not cleared\n  if (!boardCopy[action.row][action.col].clear) {\n    if (boardCopy[action.row][action.col].flag) {\n      // Remove flag if square already has it\n      boardCopy[action.row][action.col].flag = false;\n    } else {\n      boardCopy[action.row][action.col].flag = true;\n    }\n  }\n\n  return {\n    ...state,\n    board: boardCopy,\n  };\n};\n\nconst clearSquare = (state, action) => {\n  let boardCopy = copyBoard(state.board);\n  boardCopy[action.row][action.col].clear = true;\n\n  // Remove flag if the square had one\n  boardCopy[action.row][action.col].flag = false;\n\n  // If spot is a mine\n  let gameOver = state.gameOver;\n  let winner = state.winner;\n  if (boardCopy[action.row][action.col].mine) {\n    gameOver = true;\n    winner = false;\n\n    // Show all mines\n    for (let i = 0; i < boardCopy.length; i++) {\n      for (let j = 0; j < boardCopy[i].length; j++) {\n        if (boardCopy[i][j].mine) {\n          boardCopy[i][j].clear = true;\n        }\n      }\n    }\n  } else if (boardCopy[action.row][action.col].adjacent === 0) {\n    // If square with no adjacent mines clear adjacent non mine squares\n    boardCopy = clearAdjacent(boardCopy, action.row, action.col);\n  }\n\n  let winTime;\n  // Check if won\n  if (\n    flattenArray(boardCopy).filter((square) => !square.clear && !square.mine)\n      .length === 0\n  ) {\n    gameOver = true;\n    winner = true;\n    winTime = Math.floor((Date.now() - state.time) / 1000);\n  }\n\n  return {\n    ...state,\n    board: boardCopy,\n    gameOver,\n    winner,\n    winTime,\n  };\n};\n\nconst restartGame = (state, action) => {\n  return {\n    ...state,\n    gameOver: false,\n    startGame: false,\n    board: [],\n    winner: false,\n  };\n};\n\nconst submitScore = (state, action) => {\n  let newScores = [];\n  for (let score of state.scores[state.difficulty]) {\n    newScores.push({ ...score });\n  }\n\n  newScores.push({ name: action.name, score: state.winTime });\n  newScores.sort((a, b) => {\n    return a.score - b.score;\n  });\n\n  newScores = newScores.slice(0, 10);\n\n  return {\n    ...state,\n    scores: {\n      ...state.scores,\n      [state.difficulty]: newScores,\n    },\n  };\n};\n\nconst saveFetchedScores = (state, action) => {\n  let newScores = {};\n  for (let difficulty in action.scores) {\n    let array = [];\n    for (let score in action.scores[difficulty]) {\n      array.push({ name: score, score: action.scores[difficulty][score] });\n    }\n    array.sort((a, b) => {\n      return a.score - b.score;\n    });\n\n    array = array.slice(0, 10);\n    newScores[difficulty] = array;\n  }\n  return {\n    ...state,\n    scores: newScores,\n    isFetched: true,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.STORE_DIFFICULTY:\n      return storeDifficulty(state, action);\n    case actionTypes.START_GAME:\n      return startGame(state, action);\n    case actionTypes.FLAG_SQUARE:\n      return flagSquare(state, action);\n    case actionTypes.CLEAR_SQUARE:\n      return clearSquare(state, action);\n    case actionTypes.RESTART_GAME:\n      return restartGame(state, action);\n    case actionTypes.SUBMIT_SCORE:\n      return submitScore(state, action);\n    case actionTypes.SAVE_FETCHED_SCORES:\n      return saveFetchedScores(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport minesweeper from \"./store/reducers/minesweeper\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n  minesweeper,\n});\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}